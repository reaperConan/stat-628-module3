),
mainPanel(
plotOutput(outputId = "plot"),
htmlOutput(outputId = "bodyfat")
)
)
bodyfat.judge = function(gender,bodyfat){
if (gender == "male"){
if (bodyfat <= 10) return(NA) #"Extremely below normal range! Please check your input."
if (10 < bodyfat & bodyfat <= 14) return("Essential fat")
if (14 < bodyfat & bodyfat <= 21) return("Athletes")
if (21 < bodyfat & bodyfat <= 25) return("Fitness")
if (25 < bodyfat & bodyfat <= 32) return("Average")
if (bodyfat > 31 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
else {
if (bodyfat <= 3) return(NA) #"Extremely below normal range! Please check your input."
if (3 < bodyfat & bodyfat <= 6) return("Essential fat")
if (6 < bodyfat & bodyfat <= 14) return("Athletes")
if (14 < bodyfat & bodyfat <= 18) return("Fitness")
if (18 < bodyfat & bodyfat <= 25) return("Average")
if (bodyfat > 25 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
}
server <- function(input,output) {
output$plot = renderPlot({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
if (!is.na(bodyfat.judge("male", p[1])))  {
ggplot(data=data.frame(ingredient=c("other","fat"), value=c(100-p[1],p[1])), aes(x="", y=value, fill=ingredient))+
geom_bar(width = 1, stat = "identity")+coord_polar("y", start=0)+theme_gray()
}
})
output$bodyfat = renderUI({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
str1 <- paste0("You bodyfat is: ", round(p[1],1), ".")
str2 <- paste0("The 90% confidence interval of your bodyfat is ", "[",round(p[2],1),",",round(p[3],1), "].")
if (is.na(bodyfat.judge("male", p[1]))) {
HTML( paste(h3("Extremely below normal range! Please check your input.")) )
} else HTML(paste(str1, str2, "You are: ", h3(bodyfat.judge("male", p[1])), sep = '<br/>'))
})
output$space = renderText({"-------------------------------------------------"})
output$info = renderText({ "Contact us"})
output$contact1 = renderText({ "E-mail: yzeng58@wisc.edu"})
output$contact2 = renderText({ "Telephone number: 608-886-6291"})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(h1("BodyFat Calculator")),
sidebarPanel(h2("Input"),
numericInput("weight",h3("Weight"), value = 70),
selectInput("unit_weight","Unit", choices = c("kg","lb")),
numericInput("abodmen",h3("Circumference of abodmen"), value = 50),
selectInput("unit_abodmen","Unit", choices = c("cm","inch")),
submitButton(),
h3(textOutput("space")),
h4(textOutput("info")),
textOutput("contact1"),textOutput("contact2")
),
mainPanel(
plotOutput(outputId = "plot"),
htmlOutput(outputId = "bodyfat")
)
)
bodyfat.judge = function(gender,bodyfat){
if (gender == "male"){
if (bodyfat <= 10) return(NA) #"Extremely below normal range! Please check your input."
if (10 < bodyfat & bodyfat <= 14) return("Essential fat")
if (14 < bodyfat & bodyfat <= 21) return("Athletes")
if (21 < bodyfat & bodyfat <= 25) return("Fitness")
if (25 < bodyfat & bodyfat <= 32) return("Average")
if (bodyfat > 31 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
else {
if (bodyfat <= 3) return(NA) #"Extremely below normal range! Please check your input."
if (3 < bodyfat & bodyfat <= 6) return("Essential fat")
if (6 < bodyfat & bodyfat <= 14) return("Athletes")
if (14 < bodyfat & bodyfat <= 18) return("Fitness")
if (18 < bodyfat & bodyfat <= 25) return("Average")
if (bodyfat > 25 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
}
server <- function(input,output) {
output$plot = renderPlot({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
if (!is.na(bodyfat.judge("male", p[1])))  {
ggplot(data=data.frame(ingredient=c("other","fat"), value=c(100-p[1],p[1])), aes(x="", y=value, fill=ingredient))+
geom_bar(width = 1, stat = "identity")+coord_polar("y", start=0)+theme_gray()
}
})
output$bodyfat = renderUI({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
str1 <- paste0("You bodyfat is: ", round(p[1],1), ".")
str2 <- paste0("The 90% confidence interval of your bodyfat is ", "[",round(p[2],1),",",round(p[3],1), "].")
if (is.na(bodyfat.judge("male", p[1]))) {
HTML( paste(h3("Extremely below normal range! Please check your input.")) )
} else HTML(paste(str1, str2, "You are: ", h3(bodyfat.judge("male", p[1])), sep = '<br/>'))
})
output$space = renderText({"-------------------------------"})
output$info = renderText({ "Contact us"})
output$contact1 = renderText({ "E-mail: yzeng58@wisc.edu"})
output$contact2 = renderText({ "Telephone number: 608-886-6291"})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(h1("BodyFat Calculator")),
sidebarPanel(h2("Input"),
numericInput("weight",h3("Weight"), value = 70),
selectInput("unit_weight","Unit", choices = c("kg","lb")),
numericInput("abodmen",h3("Circumference of abodmen"), value = 50),
selectInput("unit_abodmen","Unit", choices = c("cm","inch")),
submitButton(),
h3(textOutput("space")),
h4(textOutput("info")),
textOutput("contact1"),textOutput("contact2")
),
mainPanel(
plotOutput(outputId = "plot"),
htmlOutput(outputId = "bodyfat")
)
)
bodyfat.judge = function(gender,bodyfat){
if (gender == "male"){
if (bodyfat <= 10) return(NA) #"Extremely below normal range! Please check your input."
if (10 < bodyfat & bodyfat <= 14) return("       Essential fat")
if (14 < bodyfat & bodyfat <= 21) return("       Athletes")
if (21 < bodyfat & bodyfat <= 25) return("       Fitness")
if (25 < bodyfat & bodyfat <= 32) return("       Average")
if (bodyfat > 31 & bodyfat <= 60) return("       Obese")
if (bodyfat > 60) return(NA)
}
else {
if (bodyfat <= 3) return(NA) #"Extremely below normal range! Please check your input."
if (3 < bodyfat & bodyfat <= 6) return("       Essential fat")
if (6 < bodyfat & bodyfat <= 14) return("       Athletes")
if (14 < bodyfat & bodyfat <= 18) return("       Fitness")
if (18 < bodyfat & bodyfat <= 25) return("       Average")
if (bodyfat > 25 & bodyfat <= 60) return("       Obese")
if (bodyfat > 60) return(NA)
}
}
server <- function(input,output) {
output$plot = renderPlot({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
if (!is.na(bodyfat.judge("male", p[1])))  {
ggplot(data=data.frame(ingredient=c("other","fat"), value=c(100-p[1],p[1])), aes(x="", y=value, fill=ingredient))+
geom_bar(width = 1, stat = "identity")+coord_polar("y", start=0)+theme_gray()
}
})
output$bodyfat = renderUI({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
str1 <- paste0("You bodyfat is: ", round(p[1],1), ".")
str2 <- paste0("The 90% confidence interval of your bodyfat is ", "[",round(p[2],1),",",round(p[3],1), "].")
if (is.na(bodyfat.judge("male", p[1]))) {
HTML( paste(h3("Extremely below normal range! Please check your input.")) )
} else HTML(paste(str1, str2, h4("You are: "), h3(bodyfat.judge("male", p[1])), sep = '<br/>'))
})
output$space = renderText({"-------------------------------"})
output$info = renderText({ "Contact us"})
output$contact1 = renderText({ "E-mail: yzeng58@wisc.edu"})
output$contact2 = renderText({ "Telephone number: 608-886-6291"})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(h1("BodyFat Calculator")),
sidebarPanel(h2("Input"),
numericInput("weight",h3("Weight"), value = 70),
selectInput("unit_weight","Unit", choices = c("kg","lb")),
numericInput("abodmen",h3("Circumference of abodmen"), value = 50),
selectInput("unit_abodmen","Unit", choices = c("cm","inch")),
submitButton(),
h3(textOutput("space")),
h4(textOutput("info")),
textOutput("contact1"),textOutput("contact2")
),
mainPanel(
plotOutput(outputId = "plot"),
htmlOutput(outputId = "bodyfat")
)
)
bodyfat.judge = function(gender,bodyfat){
if (gender == "male"){
if (bodyfat <= 10) return(NA) #"Extremely below normal range! Please check your input."
if (10 < bodyfat & bodyfat <= 14) return("Essential fat")
if (14 < bodyfat & bodyfat <= 21) return("Athletes")
if (21 < bodyfat & bodyfat <= 25) return("Fitness")
if (25 < bodyfat & bodyfat <= 32) return("Average")
if (bodyfat > 31 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
else {
if (bodyfat <= 3) return(NA) #"Extremely below normal range! Please check your input."
if (3 < bodyfat & bodyfat <= 6) return("Essential fat")
if (6 < bodyfat & bodyfat <= 14) return("Athletes")
if (14 < bodyfat & bodyfat <= 18) return("Fitness")
if (18 < bodyfat & bodyfat <= 25) return("Average")
if (bodyfat > 25 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
}
server <- function(input,output) {
output$plot = renderPlot({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
if (!is.na(bodyfat.judge("male", p[1])))  {
ggplot(data=data.frame(ingredient=c("other","fat"), value=c(100-p[1],p[1])), aes(x="", y=value, fill=ingredient))+
geom_bar(width = 1, stat = "identity")+coord_polar("y", start=0)+theme_gray()
}
})
output$bodyfat = renderUI({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
str1 <- paste0("You bodyfat is: ", round(p[1],1), ".")
str2 <- paste0("The 90% confidence interval of your bodyfat is ", "[",round(p[2],1),",",round(p[3],1), "].")
if (is.na(bodyfat.judge("male", p[1]))) {
HTML( paste(h3("Extremely below normal range! Please check your input.")) )
} else HTML(paste(str1, str2, paste(h4("You are:   "), h3(bodyfat.judge("male", p[1]))), sep = '<br/>'))
})
output$space = renderText({"-------------------------------"})
output$info = renderText({ "Contact us"})
output$contact1 = renderText({ "E-mail: yzeng58@wisc.edu"})
output$contact2 = renderText({ "Telephone number: 608-886-6291"})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(h1("BodyFat Calculator")),
sidebarPanel(h2("Input"),
numericInput("weight",h3("Weight"), value = 70),
selectInput("unit_weight","Unit", choices = c("kg","lb")),
numericInput("abodmen",h3("Circumference of abodmen"), value = 50),
selectInput("unit_abodmen","Unit", choices = c("cm","inch")),
submitButton(),
h3(textOutput("space")),
h4(textOutput("info")),
textOutput("contact1"),textOutput("contact2")
),
mainPanel(
plotOutput(outputId = "plot"),
htmlOutput(outputId = "bodyfat")
)
)
bodyfat.judge = function(gender,bodyfat){
if (gender == "male"){
if (bodyfat <= 10) return(NA) #"Extremely below normal range! Please check your input."
if (10 < bodyfat & bodyfat <= 14) return("Essential fat")
if (14 < bodyfat & bodyfat <= 21) return("Athletes")
if (21 < bodyfat & bodyfat <= 25) return("Fitness")
if (25 < bodyfat & bodyfat <= 32) return("Average")
if (bodyfat > 31 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
else {
if (bodyfat <= 3) return(NA) #"Extremely below normal range! Please check your input."
if (3 < bodyfat & bodyfat <= 6) return("Essential fat")
if (6 < bodyfat & bodyfat <= 14) return("Athletes")
if (14 < bodyfat & bodyfat <= 18) return("Fitness")
if (18 < bodyfat & bodyfat <= 25) return("Average")
if (bodyfat > 25 & bodyfat <= 60) return("Obese")
if (bodyfat > 60) return(NA)
}
}
server <- function(input,output) {
output$plot = renderPlot({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
if (!is.na(bodyfat.judge("male", p[1])))  {
ggplot(data=data.frame(ingredient=c("other","fat"), value=c(100-p[1],p[1])), aes(x="", y=value, fill=ingredient))+
geom_bar(width = 1, stat = "identity")+coord_polar("y", start=0)+theme_gray()
}
})
output$bodyfat = renderUI({
if (input$unit_weight == "lb") weight = input$weight else weight = input$weight*2.20462262
if (input$unit_abodmen == "cm") abodmen = input$abodmen else abodmen = input$abodmen*2.54
p <- predict(lm.final3, newdata = data.frame(WEIGHT = weight, ABDOMEN=abodmen*2), interval = "predict", level = 0.9)
str1 <- paste0("You bodyfat is: ", round(p[1],1), ".")
str2 <- paste0("The 90% confidence interval of your bodyfat is ", "[",round(p[2],1),",",round(p[3],1), "].")
if (is.na(bodyfat.judge("male", p[1]))) {
HTML( paste(h3("Extremely below normal range! Please check your input.")) )
} else HTML(paste(str1, str2, paste0(h6("You are:   "), h3(bodyfat.judge("male", p[1]))), sep = '<br/>'))
})
output$space = renderText({"-------------------------------"})
output$info = renderText({ "Contact us"})
output$contact1 = renderText({ "E-mail: yzeng58@wisc.edu"})
output$contact2 = renderText({ "Telephone number: 608-886-6291"})
}
shinyApp(ui = ui, server = server)
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
rsconnect::setAccountInfo(name='reaperconan', token='B0340F97D24A48B5EDCBD6565BAB4225', secret='kC06MyACcLZ3FLf06TrDWLtiq5o6527eYmoOTfE8')
library(rsconnect)
rsconnect::deployApp('/Users/cengyuchen/办公/课程/Wisconsin/2019fall/628/module2')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
?percent
percent(86)
library(scales)
percent(86)
percent(0.86)
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
?h3
?h3
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/shiny.R')
rsconnect::setAccountInfo(name='reaperconan', token='B0340F97D24A48B5EDCBD6565BAB4225', secret='kC06MyACcLZ3FLf06TrDWLtiq5o6527eYmoOTfE8')
rsconnect::deployApp('/Users/cengyuchen/办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
if (!require(ggplot2)){
install.packages("ggplot2")
stopifnot(require(ggplot2))
}
if (!require(gridExtra)){
install.packages("gridExtra")
stopifnot(require(gridExtra))
}
if (!require(cowplot)){
install.packages("cowplot")
stopifnot(require(cowplot))
}
if (!require(olsrr)){
install.packages("olsrr")
stopifnot(require(olsrr))
}
if (!require(MASS)){
install.packages("MASS")
stopifnot(require(MASS))
}
if (!require(shiny)){
install.packages("shiny")
stopifnot(require(shiny))
}
if (!require(shinythemes)){
install.packages("shinythemes")
stopifnot(require(shinythemes))
}
if (!require(dplyr)){
install.packages("dplyr")
stopifnot(require(dplyr))
}
if (!require(readr)){
install.packages("readr")
stopifnot(require(readr))
}
if (!require(rsconnect)){
install.packages("rsconnect")
stopifnot(require(rsconnect))
}
bf = read.csv("BodyFat.csv")
bf
lm.density = lm(data=bf, BODYFAT~(1/DENSITY))
outliers = order(abs(lm.density$fitted.values - bf$BODYFAT), decreasing = TRUE)[1:5]
ggplot(data = bf, aes(DENSITY, (1/BODYFAT))) + geom_point(color = "black") +
geom_smooth(method = lm) +
geom_point(aes(DENSITY[outliers[1]],BODYFAT[outliers[1]]), color = "red") +
geom_point(aes(DENSITY[outliers[2]],BODYFAT[outliers[2]]), color = "red") +
geom_point(aes(DENSITY[outliers[3]],BODYFAT[outliers[3]]), color = "red") +
geom_point(aes(DENSITY[outliers[4]],BODYFAT[outliers[4]]), color = "red") +
geom_point(aes(DENSITY[outliers[5]],BODYFAT[outliers[5]]), color = "red")
newbf = bf[-outliers,-c(1,3)]
lm.bmi = lm(data = newbf, ADIPOSITY~WEIGHT/HEIGHT^2)
summary(lm.bmi)
residual.order = order(abs(residuals(lm.bmi)), decreasing=TRUE)
qplot(data = newbf, x = WEIGHT/HEIGHT^2, y = ADIPOSITY)
residual.order = order(abs(residuals(lm.bmi)), decreasing=TRUE)
newbf[residual.order[1],4] = sqrt(newbf[residual.order[1],3]/newbf[residual.order[1],5]*703)
lm.bmi = lm(data = newbf, ADIPOSITY~WEIGHT/HEIGHT^2)
residual.order = order(abs(residuals(lm.bmi)), decreasing=TRUE)
qplot(data = newbf, x = WEIGHT/HEIGHT^2, y = ADIPOSITY)
newbf = newbf[-residual.order[1:2], ]
row.names(newbf) = 1:dim(newbf)[1]
qplot(data = newbf, x = WEIGHT/HEIGHT^2, y = ADIPOSITY)
gp = list()
for (i in 1:14+1){
my.bf = data.frame(x = newbf[,i], y = newbf$BODYFAT)
gp[[i-1]] = ggplot(data=my.bf, aes(x,y)) + geom_point() +
geom_smooth(method = 'loess') + labs(x = tolower(names(newbf)[i]), y = "Body Fat")
}
all_gp = grid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],gp[[5]],gp[[6]],gp[[7]],
gp[[8]],gp[[9]],gp[[10]],gp[[11]],gp[[12]],gp[[13]],gp[[14]],ncol=3,nrow=5)
lm.full = lm(data = newbf, BODYFAT~.)
lm.final = lm(data=newbf, BODYFAT~WEIGHT+ABDOMEN)
summary(lm.final)
plot(lm.final)
qplot(data = newbf, x = lm.final$coefficients[2]*WEIGHT+lm.final$coefficients[3]*ABDOMEN, y = BODYFAT)+geom_smooth()
n=dim(newbf)[1];p=2;index = 1:n
h<-2*p/n
le<-hatvalues(lm.final)
qplot(index, le)+labs(y="Leverage", x="Index")+
geom_abline(aes(intercept=h,slope=0),colour="blue")+
annotate(geom = "text", x = index, y = le, label = index)+
geom_linerange(x=index, ymin=0, ymax=le)+theme_bw()
h<-2*sqrt(p/n)
dfs<-dffits(lm.final)
qplot(index, dfs)+labs(y="DFFITS", x="Index")+
geom_abline(aes(intercept=-h,slope=0),colour="blue", linetype="dashed")+
geom_abline(aes(intercept=h,slope=0),colour="blue", linetype="dashed")+
geom_abline(aes(intercept=-1,slope=0),colour="blue", linetype="dashed")+
geom_abline(aes(intercept=1,slope=0),colour="blue", linetype="dashed")+
annotate(geom = "text", x = index, y = dfs, label = index)+
geom_linerange(x=index, ymin=0, ymax=dfs)+
geom_abline(aes(intercept=0,slope=0),colour="blue")+theme_bw()
h<-qf(0.50,p,n-p)
cd<-cooks.distance(lm.final)
qplot(index, cd)+labs(y="Cook's Distance", x="Index")+
geom_abline(aes(intercept=h,slope=0),colour="blue")+
annotate(geom = "text", x = index, y = cd, label = index)+
geom_linerange(x=index, ymin=0, ymax=cd)+theme_bw()
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
?percent
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
?radioButtons
-2.287e+01
-1.328e+00
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/shiny.R')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny')
rsconnect::setAccountInfo(name='reaperconan', token='B0340F97D24A48B5EDCBD6565BAB4225', secret='kC06MyACcLZ3FLf06TrDWLtiq5o6527eYmoOTfE8')
deployApp()
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
gp = list()
for (i in 2:15){
my.bf = data.frame(x = bf1[,i])
gp[[i-1]] = ggplot(data=my.bf, aes(x = "", y=x)) + geom_boxplot() + labs(x = tolower(names(bf1)[i]), y = "") + theme_bw()
}
bf = read.csv("BodyFat.csv")
bf
bf$pd.bf = 495/bf$DENSITY-450
ol.bf = order(abs(bf$pd.bf-bf$BODYFAT), decreasing = TRUE)[1:5]
bf$outlier = 1:dim(bf)[1] %in% ol.bf
ggplot(data = bf, aes(x=1/DENSITY, y=pd.bf))+geom_smooth(method="lm")+
geom_point(aes(x=1/DENSITY, y=BODYFAT, color=outlier))+ theme_bw()
bf[ol.bf,c("BODYFAT","pd.bf")]
ol.bf = c(48,76,182,216)
bf$pd.bmi = 0.45359237*bf$WEIGHT/(bf$HEIGHT*0.0254)^2
ol.bmi = order(abs(bf$pd.bmi-bf$ADIPOSITY), decreasing = TRUE)[1:3]
bf$outlier = 1:dim(bf)[1] %in% ol.bmi
ggplot(data = bf, aes(x=WEIGHT/HEIGHT^2, y=pd.bmi))+geom_smooth(method="lm")+
geom_point(aes(x=WEIGHT/HEIGHT^2, y=ADIPOSITY, color=outlier))+ theme_bw()
bf[ol.bmi,c("ADIPOSITY","pd.bmi","WEIGHT","HEIGHT")]
ol.bmi = c(163,221)
bf[42,"HEIGHT"] = 69.45
bf1 = bf[-c(ol.bf,ol.bmi), c(2,4:17)]
row.names(bf1) = 1:dim(bf1)[1]
gp = list()
for (i in 2:15){
my.bf = data.frame(x = bf1[,i])
gp[[i-1]] = ggplot(data=my.bf, aes(x = "", y=x)) + geom_boxplot() + labs(x = tolower(names(bf1)[i]), y = "") + theme_bw()
}
all_gp = grid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],gp[[5]],gp[[6]],gp[[7]],
gp[[8]],gp[[9]],gp[[10]],gp[[11]],gp[[12]],gp[[13]],gp[[14]],ncol=5,nrow=3)
ggsave("plot1.pdf",all_gp,width = 15, height = 9)
pt.ol = unique(c(order(bf1$WEIGHT,decreasing = TRUE)[1:2],
order(bf1$ADIPOSITY, decreasing = TRUE)[1:3],
order(bf1$NECK, decreasing = TRUE)[1], order(bf1$NECK)[1:2],
order(bf1$CHEST, decreasing = TRUE)[1:2],
order(bf1$ABDOMEN, decreasing = TRUE)[1:2],
order(bf1$HIP, decreasing = TRUE)[1:3],
order(bf1$THIGH, decreasing = TRUE)[1:3],
order(bf1$KNEE, decreasing = TRUE)[1:3],
order(bf1$ANKLE, decreasing = TRUE)[1:3],
order(bf1$BICEPS, decreasing = TRUE)[1],
order(bf1$FOREARM, decreasing = TRUE)[1], order(bf1$FOREARM)[1:3],
order(bf1$WRIST, decreasing = TRUE)[1:2], order(bf1$WRIST)[1]))
bf1[pt.ol,]
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
shiny::runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
runApp('办公/课程/Wisconsin/2019fall/628/module2/shiny/app')
shiny::runApp('办公/课程/628/module3/shiny/theateradvisor')
runApp('办公/课程/628/module3/shiny/theateradvisor')
runApp('办公/课程/628/module3/shiny/theateradvisor')
runApp('办公/课程/628/module3/shiny/theateradvisor')
runApp('办公/课程/628/module3/shiny/theateradvisor')
library(rsconnect)
deployApp()
setwd("~/办公/课程/628/module3/shiny/theateradvisor")
deployApp()
deployApp()
