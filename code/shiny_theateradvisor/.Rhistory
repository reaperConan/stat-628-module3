vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format())
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format())
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format())
write.csv(scale_final_score, "scale_final_score.csv")
scale_final_score = read.csv("scale_final_score.csv")[,c(2,6:12)]
scale_final_score = read.csv("scale_final_score.csv")
shiny::runApp()
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw()
scale_final_score = read.csv("scale_final_score.csv")
cn = colnames(scale_final_score)
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw()
scale_final_score[1,-1]
View(scale_final_score)
?write.csv
scale_final_score
scale_final_score = read.csv("scale_final_score.csv")[,-1]
scale_final_score
runApp()
scale_final_score[,1]
str(scale_final_score)
scale_final_score[,1] = as.character(scale_final_score[,1])
str(scale_final_score)
runApp()
which(scale_final_score[,1] == 'OEQrPxeku4BfHMCSi8UASQ')
runApp()
runApp()
ggradar(draw)
library(ggradar)
ggradar(draw)
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
cn = colnames(scale_final_score)
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
ggradar(draw)
draw
ggradar(t(draw))
t(draw)
ggradar(scale_final_score[1,])
ggradar(scale_final_score[1,])
ggradar(scale_final_score[2,])
ggradar(scale_final_score[100,])
ggradar(scale_final_score[100,]*100)
scale_final_score[100,]*100
scale_final_score[,-1] = scale_final_score[,-1]*100
ggradar(scale_final_score[100,])
scale_final_score[,-1] = scale_final_score[,-1]*10
ggradar(scale_final_score[100,])
scale_final_score[,-1]
scale_final_score = read.csv("scale_final_score.csv")[,-1]
scale_final_score[,1] = as.character(scale_final_score[,1])
scale_final_score[,-1] = scale_final_score[,-1]*10
ggradar(scale_final_score[100,])
radarchart(scale_final_score)
scale_final_score
radarchart(scale_final_score[,-1])
radarchart(scale_final_score[1,-1])
radarchart(scale_final_score[1:2,-1])
radarchart(scale_final_score[1:10,-1])
radarchart(scale_final_score[1,-1]+100)
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
data
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
data
# The default radar chart
radarchart(data)
scale_final_score[1,-1]+100
radarchart(scale_final_score[1,-1]+100)
radarchart(scale_final_score[1:2,-1]+100)
radarchart(scale_final_score[1:3,-1]+100)
scale_final_score[1:3,-1]+100
runApp()
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw()
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw() + theme(legend.position="none")
runApp()
data
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[,-1])
draw_radar
radarchart(graw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[,-1])
radarchart(graw_radar)
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[1,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[2,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[3,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[4,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[5,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[100,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[1000,-1])
radarchart(draw_radar)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[18,-1])
radarchart(draw_radar)
runApp()
scale_final_score
max(scale_final_score[,1])
max(scale_final_score[,2])
max(scale_final_score[,3])
runApp()
rbind(rep(1,7),rep(-1,7),scale_final_score[18,-1])
data <- rbind(rep(20,10) , rep(0,10) , data)
radarchart(data)
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
# The default radar chart
radarchart(data)
data
draw_radar = rbind(rep(1,7),rep(-1,7),scale(scale_final_score[18,-1]))
radarchart(draw_radar)
scale(scale_final_score[18,-1])
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[18,-1]/max(abs(scale_final_score[18,-1])))
radarchart(draw_radar)
runApp()
mean_score = apply(scale_final_score, 2, mean)
mean_score = apply(scale_final_score, 2, mean)
scale_final_score = cbind(finalscore[1], apply(finalscore[,-1], 2, my.scale))
scale_final_score = read.csv("scale_final_score.csv")[,-1]
scale_final_score[,1] = as.character(scale_final_score[,1])
mean_score = apply(scale_final_score[,-1], 2, mean)
mean_score = cbind(scale_final_score[,1],apply(scale_final_score[,-1], 2, mean))
mean_score
apply(scale_final_score[,-1], 2, mean)
mean_score = apply(scale_final_score[,-1], 2, mean)
draw_radar = rbind(rep(1,7),rep(-1,7),scale_final_score[18,-1]/max(abs(scale_final_score[18,-1])), mean_score)
?median
mean_score = apply(scale_final_score[,-1], 2, median)
scale_final_score[,-1] = scale_final_score[,-1]*10
cn = colnames(scale_final_score)
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
maxmum = max(c(scale_final_score[18,-1],mean_score))
minimum = min(c(scale_final_score[18,-1]),mean_score)
mean_score
scale_final_score[18,-1]
# draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
maxmum = max(c(scale_final_score[18,-1],mean_score))
scale_final_score[18,-1]
as.vector(scale_final_score[18,-1])
# draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
maxmum = max(c(as.vector(scale_final_score[18,-1]),mean_score))
c(scale_final_score[18,-1],mean_score)
c(scale_final_score[18,-1])
c(as.vector(scale_final_score[18,-1]),mean_score)
# draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
maxmum = max(max(scale_final_score[18,-1]), max(mean_score))
# draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
maxmum = max(max(scale_final_score[18,-1]), max(mean_score))
minimum = min(min(scale_final_score[18,-1]), min(mean_score))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[18,-1], mean_score)
radarchart(draw_radar)
mean_score = apply(scale_final_score[,-1], 2, mean)
scale_final_score[,-1] = scale_final_score[,-1]*10
cn = colnames(scale_final_score)
# draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
maxmum = max(max(scale_final_score[18,-1]), max(mean_score))
minimum = min(min(scale_final_score[18,-1]), min(mean_score))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[18,-1], mean_score)
radarchart(draw_radar)
?radarchart
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
vlcex=0.8 )
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5))
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, )
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey")
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
)
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5)
)
radarchart(draw_radar, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9)
)
pcol=rgb(0.2,0.5,0.5,0.9)
radarchart(draw_radar, axistype=1 ,
)
radarchart(draw_radar, axistype=1 ,
pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
vlcex=0.8 )
runApp()
set.seed(99)
data <- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding" )
rownames(data) <- paste("mister" , letters[1:3] , sep="-")
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
data <- rbind(rep(20,5) , rep(0,5) , data)
# Color vector
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )
# plot with default options:
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
data
rownames(data[-c(1,2),])
id =8
maxmum = max(max(scale_final_score[id,-1]), max(mean_score))
minimum = min(min(scale_final_score[id,-1]), min(mean_score))
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[id,-1], mean_score)
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
draw_radar
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
radarchart(draw_radar, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
legend(x=0.7, y=0, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
legend(x=0.7, y=-1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=1)
maxmum = max(max(scale_final_score[id,-1]), max(mean_score))
minimum = min(min(scale_final_score[id,-1]), min(mean_score))
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[id,-1], mean_score)
radarchart(draw_radar, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=1)
legend(x=0.7, y=1, legend = c(bus_id_search, "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
maxmum = max(max(scale_final_score[id,-1]), max(mean_score))
minimum = min(min(scale_final_score[id,-1]), min(mean_score))
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[id,-1], mean_score)
radarchart(draw_radar, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = c("cinema", "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
legend(x=1, y=1, legend = c("cinema", "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
legend(x=1.5, y=1, legend = c("cinema", "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
radarchart(draw_radar, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=1.5, y=1, legend = c("cinema", "mean"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
runApp()
runApp()
# plot with default options:
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
# plot with default options:
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
data <- rbind(rep(20,5) , rep(0,5) , data)
# Color vector
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )
# plot with default options:
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
set.seed(99)
data <- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding" )
rownames(data) <- paste("mister" , letters[1:3] , sep="-")
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
data <- rbind(rep(20,5) , rep(0,5) , data)
# Color vector
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )
# plot with default options:
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.2, pt.cex=3)
?radarchart
runApp()
?par
par(mfrow = c(1,2))
# plot with default options:
radarchart( data  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
runApp()
maxmum = max(max(scale_final_score[id,-1]), max(mean_score))
minimum = min(min(scale_final_score[id,-1]), min(mean_score))
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[id,-1], mean_score)
radarchart(draw_radar, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=1.5, y=1, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.3, pt.cex=2)
scale_final_score = read.csv("scale_final_score.csv")[,-1]
scale_final_score[,1] = as.character(scale_final_score[,1])
mean_score = apply(scale_final_score[,-1], 2, median)
id=1
maxmum = max(max(scale_final_score[id,-1]), max(mean_score))
minimum = min(min(scale_final_score[id,-1]), min(mean_score))
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
draw_radar = rbind(rep(maxmum,7),rep(minimum,7), scale_final_score[id,-1], mean_score)
radarchart(draw_radar, axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,15,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
legend(x=1.5, y=1, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.3, pt.cex=2)
runApp()
legend(x=0, y=2, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.3, pt.cex=2)
legend(x=0, y=1, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1.3, pt.cex=2)
legend(x=0, y=1, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
legend(x=0, y=1.5, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
legend(x=0.8, y=1, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
legend(x=0.8, y=0.9, legend = c("cinema", "median"), bty = "n", pch=20 , col=colors_in , text.col = "grey", cex=1, pt.cex=2)
runApp()
runApp()
advisor = read.csv("final_score.csv")
dim(advisor)
advisor = read.csv("final_score.csv")[,13]
advisor = read.csv("final_score.csv")[,c(1,13)]
advisor
advisor = read.csv("final_score.csv")[,c(2,13)]
head(advisor)
runApp()
advisor[advisor == bus_id_search, 2]
runApp()
advisor[advisor == bus_id_search, 2]
advisor = read.csv("final_score.csv")[,c(2,13)]
advisor[,1] = as.character(advisor[,1])
advisor[advisor == bus_id_search, 2]
runApp()
advisor[advisor == bus_id_search, 2]
bus_id_search
runApp()
runApp()
advisor[,1] == bus_id_search
advisor[advisor[,1] == bus_id_search, 2]
runApp()
runApp()
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw() + theme(legend.position="none")
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
cn = colnames(scale_final_score)
draw = data.frame(x = cn[-1], y = round(as.vector(t(scale_final_score[1,-1])),4))
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw() + theme(legend.position="none")
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw() + theme(legend.position="none") + lab(x = '')
ggplot(data = draw, aes(x,y))  +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
theme_bw() + theme(legend.position="none") + labs(x = '')
runApp()
?sep
paste(strsplit(advisor[advisor == bus_id_search, 2], "."), sep = '<br/>')
strsplit(advisor[advisor == bus_id_search, 2], ".")
advisor[advisor == bus_id_search, 2]
advisor[advisor == bus_id_search, 2][1]
a = 1
a
strsplit(advisor[advisor == bus_id_search, 2], '.')
strsplit(advisor[advisor == bus_id_search, 2], '.', fixed = TRUE)
paste(strsplit(advisor[advisor == bus_id_search, 2], '.', fixed = TRUE), sep = '<br/>')
runApp()
runApp()
strsplit(advisor[advisor == bus_id_search, 2], '.', fixed = TRUE)
paste(strsplit(advisor[advisor == bus_id_search, 2], '.', fixed = TRUE)[[1]], sep = '<br/>')
runApp()
advisor[advisor == bus_id_search, 2]
runApp()
strsplit(advisor[advisor == bus_id_search, 2], '\n', fixed = TRUE)
runApp()
strsplit(advisor[advisor == bus_id_search, 2], '\n', fixed = TRUE)
paste(strsplit(advisor[advisor == bus_id_search, 2], '\n', fixed = TRUE)[[1]], sep = '<br/>')
paste0(strsplit(advisor[advisor == bus_id_search, 2], '\n', fixed = TRUE)[[1]], sep = '<br/>')
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
deployApp()
